{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create a static website setup: S3 bucket for site, S3 bucket for logging, CloudFront with X509 Certificate, Route53 HostedZone with A and Alias records.",
    "Mappings" : {
        "RegionMap" : {
            "us-east-1" : { "S3hostedzoneID" : "Z3AQBSTGFYJSTF", "websiteendpoint" : "s3-website-us-east-1.amazonaws.com" },
            "us-west-1" : { "S3hostedzoneID" : "Z2F56UZL2M1ACD", "websiteendpoint" : "s3-website-us-west-1.amazonaws.com" },
            "us-west-2" : { "S3hostedzoneID" : "Z3BJ6K6RIION7M", "websiteendpoint" : "s3-website-us-west-2.amazonaws.com" },
            "eu-west-1" : { "S3hostedzoneID" : "Z1BKCTXD74EZPE", "websiteendpoint" : "s3-website-eu-west-1.amazonaws.com" },
            "ap-southeast-1" : { "S3hostedzoneID" : "Z3O0J2DXBE1FTB", "websiteendpoint" : "s3-website-ap-southeast-1.amazonaws.com" },
            "ap-southeast-2" : { "S3hostedzoneID" : "Z1WCIGYICN2BYD", "websiteendpoint" : "s3-website-ap-southeast-2.amazonaws.com" },
            "ap-northeast-1" : { "S3hostedzoneID" : "Z2M4EHUR26P7ZW", "websiteendpoint" : "s3-website-ap-northeast-1.amazonaws.com" },
            "sa-east-1" : { "S3hostedzoneID" : "Z31GFT0UA1I2HV", "websiteendpoint" : "s3-website-sa-east-1.amazonaws.com" }
        }
    },
    "Parameters": {
        "RootDomainName": {
            "Description": "Domain name for your website (example.com)",
            "Type": "String"
        },
        "ServerCertificateId" : {
            "Description" : "ID of an existing SSL certificate on AWS (e.g., 'ASCAIYHF6AIP3LFR4WEZU')",
            "Type" : "String",
            "AllowedPattern" : "[A-Z][A-Z0-9]*",
            "NoEcho": true
        }
    },
    "Resources": {
        "LogBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": ["", ["logs.", {"Ref":"RootDomainName"}]]
                },
                "AccessControl": "LogDeliveryWrite"
            },
            "DeletionPolicy" : "Retain"
        },
        "RootBucket": {
            "DependsOn": ["LogBucket"],
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName" : {"Ref":"RootDomainName"},
                "AccessControl": "PublicRead",
                "WebsiteConfiguration": {
                    "IndexDocument":"index.html",
                    "ErrorDocument":"404.html"
                },
                "LoggingConfiguration": {
                    "DestinationBucketName": {"Ref": "LogBucket"},
                    "LogFilePrefix": "logs/"
                }
            },
            "DeletionPolicy" : "Retain"
        },
        "RootBucketWebsitePolicy": {
            "DependsOn": ["RootBucket"],
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": { "Ref": "RootBucket" },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "Allow Public Access to All Objects",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "s3:GetObject",
                            "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "RootBucket" } , "/*" ]]}

                        }
                    ]
                }
            }
        },
        "CloudFrontDistribution": {
            "DependsOn": ["RootBucket", "LogBucket"],
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Aliases": [
                        {"Ref": "RootDomainName"},
                        {"Fn::Join": ["", ["www.", {"Ref":"RootDomainName"}]]}
                    ],
                    "CustomErrorResponses" : [
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 400,
                            "ResponseCode" : 400,
                            "ResponsePagePath" : "/400.html"
                        },
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 403,
                            "ResponseCode" : 403,
                            "ResponsePagePath" : "/403.html"
                        },
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 404,
                            "ResponseCode" : 404,
                            "ResponsePagePath" : "/404.html"
                        },
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 405,
                            "ResponseCode" : 405,
                            "ResponsePagePath" : "/405.html"
                        },
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 416,
                            "ResponseCode" : 416,
                            "ResponsePagePath" : "/416.html"
                        },
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 500,
                            "ResponseCode" : 500,
                            "ResponsePagePath" : "/500.html"
                        },
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 501,
                            "ResponseCode" : 501,
                            "ResponsePagePath" : "/501.html"
                        },
                        {
                            "ErrorCachingMinTTL" : 86400,
                            "ErrorCode" : 503,
                            "ResponseCode" : 503,
                            "ResponsePagePath" : "/503.html"
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "TargetOriginId": {"Ref":"RootDomainName"},
                        "ViewerProtocolPolicy": "redirect-to-https",
                        "MinTTL": 86400,
                        "Compress": true,
                        "AllowedMethods": [ "HEAD", "GET", "OPTIONS" ],
                        "CachedMethods": [ "HEAD", "GET", "OPTIONS" ],
                        "ForwardedValues": {
                            "QueryString" : "false",
                            "Cookies" : { "Forward" : "none" }
                        }
                    },
                    "DefaultRootObject": "index.html",
                    "Enabled": true,
                    "Logging": {
                        "Bucket": { "Fn::GetAtt" : [ "LogBucket", "DomainName" ] },
                        "Prefix": "cdn",
                        "IncludeCookies" : "false"
                    },
                    "Origins": [
                        {
                            "DomainName": {"Fn::Join" : [".", [ {"Ref" : "RootBucket"}, {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "websiteendpoint"]} ]]},
                            "Id": {"Ref":"RootDomainName"},
                            "CustomOriginConfig": {
                                "HTTPPort": "80",
                                "HTTPSPort": "443",
                                "OriginProtocolPolicy": "http-only"
                            }
                        }
                    ],
                    "PriceClass": "PriceClass_All",
                    "ViewerCertificate": {
                        "IamCertificateId": {"Ref": "ServerCertificateId"},
                        "SslSupportMethod": "sni-only",
                        "MinimumProtocolVersion": "TLSv1"
                    }
                }
            }
        },
        "DomainHostedZone": {
            "Type": "AWS::Route53::HostedZone",
            "Description": "",
            "Properties": {
                "Name": {
                    "Fn::Join": ["", [{"Ref": "RootDomainName"}, "."]]
                }
            }
        },
        "DomainRecordSetGroups": {
            "DependsOn": ["DomainHostedZone", "CloudFrontDistribution"],
            "Type": "AWS::Route53::RecordSetGroup",
            "Description": "",
            "Properties": {
                "HostedZoneId": {"Ref": "DomainHostedZone"},
                "Comment": "Zone apex alias.",
                "RecordSets": [
                    {
                        "Name": {"Ref": "RootDomainName"},
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": "Z2FDTNDATAQYW2",
                            "DNSName": {"Fn::GetAtt": ["CloudFrontDistribution", "DomainName"]}
                        }
                    },
                    {
                        "Name": {
                            "Fn::Join": ["", ["www.", {"Ref":"RootDomainName"}]]
                        },
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": "Z2FDTNDATAQYW2",
                            "DNSName": {"Fn::GetAtt": ["CloudFrontDistribution", "DomainName"]}
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Value": {"Fn::GetAtt": ["RootBucket", "WebsiteURL"]},
            "Description": "URL for website hosted on S3"
        },
        "S3BucketSecureURL" : {
            "Value" : { "Fn::Join" : [ "", [ "https://", { "Fn::GetAtt" : [ "RootBucket", "DomainName" ] } ] ] },
            "Description" : "Name of S3 bucket to hold website content"
        },
        "CloudFrontDomain": {
            "Value": {"Fn::GetAtt": ["CloudFrontDistribution", "DomainName"]},
            "Description" : "Domain of CloudFront Distribution."
        }
    }
}
